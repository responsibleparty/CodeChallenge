{"remainingRequest":"/Users/ceciliatu/dev/code-challenge/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ceciliatu/dev/code-challenge/src/components/StudentInfo.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/ceciliatu/dev/code-challenge/src/components/StudentInfo.vue","mtime":1574448345522},{"path":"/Users/ceciliatu/dev/code-challenge/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ceciliatu/dev/code-challenge/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/ceciliatu/dev/code-challenge/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/ceciliatu/dev/code-challenge/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ceciliatu/dev/code-challenge/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCnRyLmJlc3QtZ3BhID4gdGQsIHRyLmJlc3QtZ3BhID4gdGggewogICAgY29sb3I6IGJsYWNrOwp9Cgp0ci53b3JzdC1ncGEgPiB0ZCwgdHIud29yc3QtZ3BhID4gdGggewogICAgY29sb3I6YmxhY2s7Cn0KCi5mb3JtLWlubGluZSAuZm9ybS1ncm91cCB7CiAgICBmbGV4OiAxIDEgYXV0bzsKICAgIG1hcmdpbjoxMHB4Owp9CgouZm9ybS1pbmxpbmUgLmZvcm0tY29udHJvbCB7CiAgICB3aWR0aDogMTAwJTsKfQoKLmZvcm0tZ3JvdXAgYnV0dG9uIHsKICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7Cn0KCkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkgewogICAgIC5mb3JtLWlubGluZSAuZm9ybS1jb250cm9sIHsKICAgICAgICB3aWR0aDogMTAwJTsKICAgIH0gICAKfQo="},{"version":3,"sources":["StudentInfo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"StudentInfo.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div style=\"margin:10px\">\n        <h2>Student Performance</h2>\n        <div class=\"form-inline\" role=\"form\" style=\"flex-flow:row nowrap\">\n            <div class=\"form-group mb1\">\n                <label v-bind:for=\"'name'\" class=\"sr-only\">Name</label>\n                <input v-bind:type=\"'text'\" maxlength=\"20\" v-bind:id=\"'name'\" v-bind:name=\"'name'\" class=\"form-control\" v-bind:class=\"getValidationClass('name')\" v-bind:placeholder=\"'Enter Name'\" v-model=\"formData['name']\"/>\n            </div>\n            <div class=\"form-group mb2\" v-for=\"(subject,index) in subjects\" v-bind:key=\"index\">\n                <label v-bind:for=\"subject\" class=\"sr-only\">{{subject}}</label>\n                <input v-bind:type=\"'text'\" maxlength=\"1\" v-bind:id=\"subject\" v-bind:name=\"subject\" class=\"form-control\" v-bind:class=\"getValidationClass(subject)\" v-bind:placeholder=\"'Enter '+subject\" v-model=\"formData[subject]\"/>\n            </div>\n            <div class=\"form-group mb1\">\n                <button type=\"button\" :disabled='!isFormValid()' class=\"btn btn-primary\" @click=\"addStudent\">Add Student</button>\n            </div>        \n        </div>\n        <table class=\"table table-striped table-dark\">\n        <thead>\n            <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\" v-for=\"(subject,index) in subjects\" v-bind:key=\"index\">{{subject}}</th>\n            <th scope=\"col\">GPA</th>\n            <th></th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr v-for=\"(student,index) in students\" v-bind:key=\"student._id\" v-bind:class=\"getBestWorstClasses(student)\">\n            <th scope=\"row\">{{index+1}}</th>\n            <td>{{student.name}}</td>\n            <td scope=\"row\" v-for=\"(subject,index) in subjects\" v-bind:key=\"index\">{{student.gradeMap[subject]}}</td>\n            <td>{{student.gpa}}</td>\n            <td><button @click=\"removeStudent(student._id)\">Remove</button></td>\n            </tr>\n        </tbody>\n        </table>\n    </div>\n</template>\n\n<style>\n    tr.best-gpa > td, tr.best-gpa > th {\n        color: black;\n    }\n\n    tr.worst-gpa > td, tr.worst-gpa > th {\n        color:black;\n    }\n\n    .form-inline .form-group {\n        flex: 1 1 auto;\n        margin:10px;\n    }\n\n    .form-inline .form-control {\n        width: 100%;\n    }\n\n    .form-group button {\n        white-space: nowrap;\n    }\n\n    @media (min-width: 576px) {\n         .form-inline .form-control {\n            width: 100%;\n        }   \n    }\n</style>\n\n<script>\n\nlet extractGrade = (gradeDescription) => {\n          let gradeMap = {\n              A: 4,\n              B: 3,\n              C: 2,\n              D: 1,\n              F: 0 \n          }\n          let index = gradeDescription.length - 1\n          return gradeMap[gradeDescription.charAt(index)]\n      }\n\nlet calculateGPA = (grades) => {\n    let total = 0;\n    grades.forEach( grade => {\n        total += extractGrade(grade);\n    })\n    return total / grades.length\n}\n\nlet getGradeMap = (grades) => {\n          let map = {}\n          grades.forEach( gradeDesc => {\n            const end = gradeDesc.indexOf(\" \")\n            const subject = gradeDesc.substring(0,end)\n            const grade = gradeDesc.charAt(gradeDesc.length - 1)\n            map[subject] = grade\n          })\n\n          return map\n        //   return {\n        //       Math: 'A',\n        //       History: 'B',\n        //       Science: 'A',\n        //       English: 'B'\n        //   }\n}\n\nlet toSimplifiedStudent = (student) => {\n    return {\n        _id: student._id,\n        name: student.name,\n        gpa: calculateGPA(student.grades),\n        gradeMap: getGradeMap(student.grades)\n    }\n}\n\nexport default {\n  name: \"StudentInfo\",\n  methods: {\n      getBestWorstClasses: function(student) {\n          if(this.isBestGPA(student.gpa) && this.isWorstGPA(student.gpa)) {\n              return ''\n          } else if(this.isBestGPA(student.gpa)) {\n             return 'best-gpa bg-success'\n          } else if (this.isWorstGPA(student.gpa)){\n             return 'worst-gpa bg-danger'\n          }\n        \n      },\n      getValidationClass: function(column) {\n        return !this.isPristine(this.formData[column]) ? (this.validateInputType(column, this.formData[column]) ? 'is-valid' : 'is-invalid') : ''\n      },\n      isPristine: function(value) {\n          return value == null\n      },\n      isValidGrade: function(value) {\n          return ['A','B','C','D','F'].indexOf(value.toUpperCase()) > -1\n      },\n      isValidName: function(value) {\n          return value !== ''\n      },\n      validateInputType : function(key, value) {\n        return key === \"name\" ? this.isValidName(value) : this.isValidGrade(value)\n      },\n      isFormValid: function() {\n          let isValid = true;\n          \n          [\"name\"].concat(this.subjects).forEach( key => {\n                let value = this.formData[key]\n                isValid = isValid && !this.isPristine(value) && this.validateInputType(key, value)\n          })\n          return isValid\n      },\n      isBestGPA: function(gpa) {\n          return gpa === this.bestGPA\n      },\n      isWorstGPA: function(gpa) {\n          return gpa === this.worstGPA\n      },\n      resetBestAndWorst: function(){\n          this.bestGPA = 0\n          this.worstGPA = 4\n      },\n      persistBestAndWorst: function(gpa) {\n        if(gpa > this.bestGPA ) {\n            this.bestGPA = gpa\n        }\n        if(gpa < this.worstGPA ) {\n            this.worstGPA = gpa\n        }\n      },\n      makeStudent: function(formData) {\n          const formattedGrades = this.subjects.map( subject => `${subject} - ${formData[subject].toUpperCase()}`)\n          return {\n              _id : this.students.length + 1,\n              name: formData.name,\n              gpa: calculateGPA(formattedGrades),\n              gradeMap :getGradeMap(formattedGrades)\n          }\n      },\n      addStudent: function() {\n          const student = this.makeStudent(this.formData)\n          this.students.push(student)\n          this.persistBestAndWorst(student.gpa)\n      },\n      removeStudent: function(id) {\n          this.students = this.students.filter(student => student._id !== id)\n          this.resetBestAndWorst()\n          this.students.map( student => this.persistBestAndWorst(student.gpa) )\n      }\n  },\n  data: () => ({\n    formData: {name:null, Math: null, History: null, Science: null, English: null},\n    subjects: ['Math', 'History', 'Science', 'English'],\n    bestGPA: 0,\n    worstGPA: 4,\n    students: [\n      {\n        _id: 1,\n        name: \"Adam\",\n        grades: [\"Math - A\", \"History - B\", \"Science - A\", \"English - B\"],\n        img: \"https://i.pravatar.cc/300\",\n        gender: \"M\",\n        birthday: \"July 23, 2003\",\n        athlete: true,\n        grade: 10\n      },\n      {\n        _id: 2,\n        name: \"John\",\n        grades: [\"Math - B\", \"History - B\", \"Science - B\", \"English - B\"],\n        img: \"https://i.pravatar.cc/300\",\n        gender: \"M\",\n        birthday: \"September 8, 2005\",\n        athlete: false,\n        grade: 8\n      },\n      {\n        _id: 3,\n        name: \"Sarah\",\n        grades: [\"Math - C\", \"History - B\", \"Science - B\", \"English - C\"],\n        img: \"https://i.pravatar.cc/300\",\n        gender: \"F\",\n        birthday: \"January 17, 2004\",\n        athlete: false,\n        grade: 9\n      },\n      {\n        _id: 4,\n        name: \"Katie\",\n        grades: [\"Math - D\", \"History - B\", \"Science - C\", \"English - B\"],\n        img: \"https://i.pravatar.cc/300\",\n        gender: \"F\",\n        birthday: \"October 6, 2005\",\n        athlete: true,\n        grade: 8\n      },\n      {\n        _id: 5,\n        name: \"Phil\",\n        grades: [\"Math - F\", \"History - B\", \"Science - C\", \"English - D\"],\n        img: \"https://i.pravatar.cc/300\",\n        gender: \"M\",\n        birthday: \"August 13, 2001\",\n        athlete: false,\n        grade: 12\n      }\n    ].map( student => toSimplifiedStudent(student))\n  }),\n  created: function () {\n    this.students.forEach( student => this.persistBestAndWorst(student.gpa))\n  },\n  props: {}\n};\n</script>\n\n<style scoped>\n</style>"]}]}