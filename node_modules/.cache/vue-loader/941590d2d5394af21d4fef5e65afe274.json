{"remainingRequest":"/Users/ceciliatu/dev/CodeChallenge/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/ceciliatu/dev/CodeChallenge/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ceciliatu/dev/CodeChallenge/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ceciliatu/dev/CodeChallenge/src/components/StudentInfo.vue?vue&type=template&id=c251d1ee&scoped=true&","dependencies":[{"path":"/Users/ceciliatu/dev/CodeChallenge/src/components/StudentInfo.vue","mtime":1574448345522},{"path":"/Users/ceciliatu/dev/CodeChallenge/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ceciliatu/dev/CodeChallenge/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/ceciliatu/dev/CodeChallenge/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ceciliatu/dev/CodeChallenge/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}